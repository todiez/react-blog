{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = url => {\n  _s();\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect(() => {\n  //   //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n  //   //useState is a hook which rerenders the component on every state change\n\n  //   const abortCont = new AbortController();\n  //   console.log(abortCont);\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //         console.log(err);\n  //       } else {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => abortCont.abort();\n  // }, [url]);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n    let isMounted = true; // Track whether the component is mounted\n\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error(\"could not fetch the data\");\n      }\n      return res.json();\n    }).then(data => {\n      if (isMounted) {\n        // Only update state if component is still mounted\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"fetch aborted\");\n      } else if (isMounted) {\n        // Check if mounted before updating state\n        setIsPending(false);\n        setError(err.message);\n      }\n    });\n    return () => {\n      isMounted = false; // Mark component as unmounted\n      abortCont.abort();\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","isMounted","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/home/tobiya/Coding/react-blog/frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = (url) => {\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect(() => {\n  //   //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n  //   //useState is a hook which rerenders the component on every state change\n\n  //   const abortCont = new AbortController();\n  //   console.log(abortCont);\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //         console.log(err);\n  //       } else {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => abortCont.abort();\n  // }, [url]);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n    let isMounted = true; // Track whether the component is mounted\n  \n    fetch(url, { signal: abortCont.signal })\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"could not fetch the data\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        if (isMounted) { // Only update state if component is still mounted\n          setData(data);\n          setIsPending(false);\n          setError(null);\n        }\n      })\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"fetch aborted\");\n        } else if (isMounted) { // Check if mounted before updating state\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n  \n    return () => {\n      isMounted = false; // Mark component as unmounted\n      abortCont.abort();\n    };\n  }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;AACA;;AAEA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IACvC,IAAIC,SAAS,GAAG,IAAI,CAAC,CAAC;;IAEtBC,KAAK,CAACX,GAAG,EAAE;MAAEY,MAAM,EAAEJ,SAAS,CAACI;IAAO,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACX,MAAMC,KAAK,CAAC,0BAA0B,CAAC;MACzC;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDJ,IAAI,CAAEX,IAAI,IAAK;MACd,IAAIQ,SAAS,EAAE;QAAE;QACfP,OAAO,CAACD,IAAI,CAAC;QACbG,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC,CACDW,KAAK,CAAEC,GAAG,IAAK;MACd,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC9B,CAAC,MAAM,IAAIZ,SAAS,EAAE;QAAE;QACtBL,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACY,GAAG,CAACI,OAAO,CAAC;MACvB;IACF,CAAC,CAAC;IAEJ,OAAO,MAAM;MACXb,SAAS,GAAG,KAAK,CAAC,CAAC;MACnBF,SAAS,CAACgB,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACxB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACL,EAAA,CAzEIF,QAAQ;AA2Ed,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}