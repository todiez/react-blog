{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    this.options = Object.freeze({\n      connectionType: connection_1.Connection,\n      ...options,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter\n    });\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n    this[kPoolState] = exports.PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new utils_1.List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new utils_1.List();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.component = 'connection';\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n  get currentCheckedOutCount() {\n    return this[kCheckedOut].size;\n  }\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  get serverError() {\n    return this[kServer].description.error;\n  }\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready() {\n    if (this[kPoolState] !== exports.PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = exports.PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  async checkOut() {\n    const checkoutTime = (0, utils_1.now)();\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    const {\n      promise,\n      resolve,\n      reject\n    } = (0, utils_1.promiseWithResolvers)();\n    const timeout = timeout_1.Timeout.expires(waitQueueTimeoutMS);\n    const waitQueueMember = {\n      resolve,\n      reject,\n      timeout,\n      checkoutTime\n    };\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n    try {\n      return await Promise.race([promise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (timeout_1.TimeoutError.is(error)) {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timeout.clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));\n        const timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address);\n        throw timeoutError;\n      }\n      throw error;\n    }\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection) {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options = {}) {\n    if (this.closed) {\n      return;\n    }\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const {\n        serviceId\n      } = options;\n      if (!serviceId) {\n        throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        serviceId\n      }));\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n    this[kPoolState] = exports.PoolState.paused;\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        interruptInUseConnections\n      }));\n    }\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n    this.processWaitQueue();\n  }\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  interruptInUseConnections(minGeneration) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n        this.checkIn(connection);\n      }\n    }\n  }\n  /** Close the pool */\n  close() {\n    if (this.closed) {\n      return;\n    }\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n    this[kPoolState] = exports.PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n    for (const conn of this[kConnections]) {\n      this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy();\n    }\n    this[kConnections].clear();\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n  }\n  /**\n   * @internal\n   * Reauthenticate a connection\n   */\n  async reauthenticate(connection) {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      throw new error_1.MongoRuntimeError('No auth context found on connection.');\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n    }\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n    const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n    if (!provider) {\n      throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n    }\n    await provider.reauth(authContext);\n    return;\n  }\n  /** Clear the min pool size timer */\n  clearMinPoolSizeTimer() {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    }\n  }\n  destroyConnection(connection, reason) {\n    this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n    // destroy the connection\n    connection.destroy();\n  }\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n    return connection.generation !== this[kGeneration];\n  }\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  destroyConnectionIfPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n  createConnection(callback) {\n    const connectOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken],\n      mongoLogger: this.mongoLogger,\n      authProviders: this[kServer].topology.client.s.authProviders\n    };\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    const connectionCreatedTime = (0, utils_1.now)();\n    this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions).then(connection => {\n      // The pool might have closed since we started trying to create a connection\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        this[kPending]--;\n        connection.destroy();\n        callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n        return;\n      }\n      // forward all events from the connection to the pool\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n      connection.markAvailable();\n      this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection, connectionCreatedTime));\n      this[kPending]--;\n      callback(undefined, connection);\n    }, error => {\n      this[kPending]--;\n      this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n        id: connectOptions.id,\n        serviceId: undefined\n      }, 'error',\n      // TODO(NODE-5192): Remove this cast\n      error));\n      if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n        error.connectionGeneration = connectOptions.generation;\n      }\n      callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n    });\n  }\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === exports.PoolState.ready) {\n          (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n      });\n    } else {\n      (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n    }\n  }\n  processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.reject(error);\n        continue;\n      }\n      if (!this.availableConnectionCount) {\n        break;\n      }\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.resolve(connection);\n      }\n    }\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n            // TODO(NODE-5192): Remove this cast\n            new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', waitQueueMember.checkoutTime, err));\n            waitQueueMember.reject(err);\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n            waitQueueMember.resolve(connection);\n          }\n          waitQueueMember.timeout.clear();\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"names":["timers_1","require","constants_1","error_1","mongo_types_1","timeout_1","utils_1","connect_1","connection_1","connection_pool_events_1","errors_1","metrics_1","kServer","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","PoolState","Object","freeze","paused","ready","closed","ConnectionPool","TypedEventEmitter","constructor","server","options","connectionType","Connection","maxPoolSize","minPoolSize","maxConnecting","maxIdleTimeMS","waitQueueTimeoutMS","minPoolSizeCheckFrequencyMS","autoEncrypter","MongoInvalidArgumentError","List","Set","undefined","Map","makeCounter","CancellationToken","setMaxListeners","Infinity","ConnectionPoolMetrics","mongoLogger","topology","client","component","process","nextTick","emitAndLog","CONNECTION_POOL_CREATED","ConnectionPoolCreatedEvent","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","size","waitQueueSize","loadBalanced","serviceGenerations","serverError","description","error","checkedOutConnections","waitQueueErrorMetrics","info","CONNECTION_POOL_READY","ConnectionPoolReadyEvent","clearTimeout","ensureMinPoolSize","checkOut","checkoutTime","now","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutStartedEvent","promise","resolve","reject","promiseWithResolvers","timeout","Timeout","expires","waitQueueMember","push","processWaitQueue","Promise","race","TimeoutError","is","clear","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckOutFailedEvent","timeoutError","WaitQueueTimeoutError","checkIn","connection","has","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","delete","CONNECTION_CHECKED_IN","ConnectionCheckedInEvent","reason","destroyConnection","serviceId","MongoRuntimeError","sid","toHexString","get","set","CONNECTION_POOL_CLEARED","ConnectionPoolClearedEvent","interruptInUseConnections","oldGeneration","alreadyPaused","clearMinPoolSizeTimer","minGeneration","onError","PoolClearedOnNetworkError","close","emit","return","conn","CONNECTION_CLOSED","ConnectionClosedEvent","destroy","CONNECTION_POOL_CLOSED","ConnectionPoolClosedEvent","reauthenticate","authContext","credentials","MongoMissingCredentialsError","resolvedCredentials","resolveAuthMechanism","hello","provider","s","authProviders","getOrCreateProvider","mechanism","mechanismProperties","reauth","minPoolSizeTimer","connectionIsIdle","idleTime","destroyConnectionIfPerished","isStale","isIdle","createConnection","callback","connectOptions","id","next","value","cancellationToken","connectionCreatedTime","CONNECTION_CREATED","ConnectionCreatedEvent","connect","then","PoolClosedError","PoolClearedError","event","APM_EVENTS","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","ConnectionReadyEvent","MongoNetworkError","MongoServerError","connectionGeneration","prune","err","handleError","setTimeout","first","shift","add","CONNECTION_CHECKED_OUT","ConnectionCheckedOutEvent"],"sources":["/home/tobiya/node_modules/mongodb/src/cmap/connection_pool.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport {\n  type AnyError,\n  type MongoError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoServerError\n} from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport { Timeout, TimeoutError } from '../timeout';\nimport { type Callback, List, makeCounter, now, promiseWithResolvers } from '../utils';\nimport { connect } from './connect';\nimport { Connection, type ConnectionEvents, type ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport {\n  PoolClearedError,\n  PoolClearedOnNetworkError,\n  PoolClosedError,\n  WaitQueueTimeoutError\n} from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n  /** @internal */\n  minPoolSizeCheckFrequencyMS?: number;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  resolve: (conn: Connection) => void;\n  reject: (err: AnyError) => void;\n  timeout: Timeout;\n  [kCancelled]?: boolean;\n  checkoutTime: number;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/**\n * @public\n * @deprecated This interface is deprecated and will be removed in a future release as it is not used\n * in the driver\n */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolReady(event: ConnectionPoolReadyEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  [kPoolState]: (typeof PoolState)[keyof typeof PoolState];\n  [kServer]: Server;\n  [kConnections]: List<Connection>;\n  [kPending]: number;\n  [kCheckedOut]: Set<Connection>;\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   */\n  [kGeneration]: number;\n  /**\n   * A map of generations to service ids\n   */\n  [kServiceGenerations]: Map<string, number>;\n  [kConnectionCounter]: Generator<number>;\n  [kCancellationToken]: CancellationToken;\n  [kWaitQueue]: List<WaitQueueMember>;\n  [kMetrics]: ConnectionPoolMetrics;\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted each time the connection pool is marked ready\n   * @event\n   */\n  static readonly CONNECTION_POOL_READY = CONNECTION_POOL_READY;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  constructor(server: Server, options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      connectionType: Connection,\n      ...options,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new List();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.component = 'connection';\n\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut].size;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get serverError() {\n    return this[kServer].description.error;\n  }\n\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    if (this[kPoolState] !== PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new ConnectionPoolReadyEvent(this));\n    clearTimeout(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  async checkOut(): Promise<Connection> {\n    const checkoutTime = now();\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    const { promise, resolve, reject } = promiseWithResolvers<Connection>();\n\n    const timeout = Timeout.expires(waitQueueTimeoutMS);\n\n    const waitQueueMember: WaitQueueMember = {\n      resolve,\n      reject,\n      timeout,\n      checkoutTime\n    };\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n\n    try {\n      return await Promise.race([promise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (TimeoutError.is(error)) {\n        waitQueueMember[kCancelled] = true;\n\n        waitQueueMember.timeout.clear();\n\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime)\n        );\n        const timeoutError = new WaitQueueTimeoutError(\n          this.loadBalanced\n            ? this.waitQueueErrorMetrics()\n            : 'Timed out while checking out a connection from connection pool',\n          this.address\n        );\n        throw timeoutError;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECKED_IN,\n      new ConnectionCheckedInEvent(this, connection)\n    );\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}): void {\n    if (this.closed) {\n      return;\n    }\n\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const { serviceId } = options;\n      if (!serviceId) {\n        throw new MongoRuntimeError(\n          'ConnectionPool.clear() called in load balanced mode with no serviceId.'\n        );\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, { serviceId })\n      );\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === PoolState.paused;\n    this[kPoolState] = PoolState.paused;\n\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, {\n          interruptInUseConnections\n        })\n      );\n    }\n\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n\n    this.processWaitQueue();\n  }\n\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  private interruptInUseConnections(minGeneration: number) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        connection.onError(new PoolClearedOnNetworkError(this));\n        this.checkIn(connection);\n      }\n    }\n  }\n\n  /** Close the pool */\n  close(): void {\n    if (this.closed) {\n      return;\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    this[kPoolState] = PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n\n    for (const conn of this[kConnections]) {\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_CLOSED,\n        new ConnectionClosedEvent(this, conn, 'poolClosed')\n      );\n      conn.destroy();\n    }\n    this[kConnections].clear();\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n  }\n\n  /**\n   * @internal\n   * Reauthenticate a connection\n   */\n  async reauthenticate(connection: Connection): Promise<void> {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      throw new MongoRuntimeError('No auth context found on connection.');\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      throw new MongoMissingCredentialsError(\n        'Connection is missing credentials when asked to reauthenticate'\n      );\n    }\n\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n    const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(\n      resolvedCredentials.mechanism,\n      resolvedCredentials.mechanismProperties\n    );\n\n    if (!provider) {\n      throw new MongoMissingCredentialsError(\n        `Reauthenticate failed due to no auth provider for ${credentials.mechanism}`\n      );\n    }\n\n    await provider.reauth(authContext);\n\n    return;\n  }\n\n  /** Clear the min pool size timer */\n  private clearMinPoolSizeTimer(): void {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n  }\n\n  private destroyConnection(\n    connection: Connection,\n    reason: 'error' | 'idle' | 'stale' | 'poolClosed'\n  ) {\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n    // destroy the connection\n    connection.destroy();\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  private destroyConnectionIfPerished(connection: Connection): boolean {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken],\n      mongoLogger: this.mongoLogger,\n      authProviders: this[kServer].topology.client.s.authProviders\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    const connectionCreatedTime = now();\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions).then(\n      connection => {\n        // The pool might have closed since we started trying to create a connection\n        if (this[kPoolState] !== PoolState.ready) {\n          this[kPending]--;\n          connection.destroy();\n          callback(this.closed ? new PoolClosedError(this) : new PoolClearedError(this));\n          return;\n        }\n\n        // forward all events from the connection to the pool\n        for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n          connection.on(event, (e: any) => this.emit(event, e));\n        }\n\n        if (this.loadBalanced) {\n          connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n          connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n          const serviceId = connection.serviceId;\n          if (serviceId) {\n            let generation;\n            const sid = serviceId.toHexString();\n            if ((generation = this.serviceGenerations.get(sid))) {\n              connection.generation = generation;\n            } else {\n              this.serviceGenerations.set(sid, 0);\n              connection.generation = 0;\n            }\n          }\n        }\n\n        connection.markAvailable();\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_READY,\n          new ConnectionReadyEvent(this, connection, connectionCreatedTime)\n        );\n\n        this[kPending]--;\n        callback(undefined, connection);\n      },\n      error => {\n        this[kPending]--;\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(\n            this,\n            { id: connectOptions.id, serviceId: undefined },\n            'error',\n            // TODO(NODE-5192): Remove this cast\n            error as MongoError\n          )\n        );\n        if (error instanceof MongoNetworkError || error instanceof MongoServerError) {\n          error.connectionGeneration = connectOptions.generation;\n        }\n        callback(error ?? new MongoRuntimeError('Connection creation failed without error'));\n      }\n    );\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === PoolState.ready) {\n          clearTimeout(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = setTimeout(\n            () => this.ensureMinPoolSize(),\n            this.options.minPoolSizeCheckFrequencyMS\n          );\n        }\n      });\n    } else {\n      clearTimeout(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = setTimeout(\n        () => this.ensureMinPoolSize(),\n        this.options.minPoolSizeCheckFrequencyMS\n      );\n    }\n  }\n\n  private processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (this[kPoolState] !== PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new PoolClosedError(this) : new PoolClearedError(this);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error)\n        );\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.reject(error);\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime)\n        );\n        waitQueueMember.timeout.clear();\n\n        this[kWaitQueue].shift();\n        waitQueueMember.resolve(connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              // TODO(NODE-5192): Remove this cast\n              new ConnectionCheckOutFailedEvent(\n                this,\n                'connectionError',\n                waitQueueMember.checkoutTime,\n                err as MongoError\n              )\n            );\n            waitQueueMember.reject(err);\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime)\n            );\n            waitQueueMember.resolve(connection);\n          }\n\n          waitQueueMember.timeout.clear();\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}