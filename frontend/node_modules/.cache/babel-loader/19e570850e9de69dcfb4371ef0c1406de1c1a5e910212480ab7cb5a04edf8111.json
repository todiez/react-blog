{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = url => {\n  _s();\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n    //useState is a hook which rerenders the component on every state change\n\n    const abortCont = new AbortController();\n    console.log(abortCont);\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error(\"could not fetch the data\");\n      }\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"fetch aborted\");\n        console.log(err);\n      } else {\n        setIsPending(false);\n        setError(err.message);\n      }\n    });\n    return () => abortCont.abort();\n  }, [url]);\n\n  // useEffect(() => {\n  //   const abortCont = new AbortController();\n  //   let isMounted = true; // Track whether the component is mounted\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       if (isMounted) {\n  //         // Only update state if component is still mounted\n  //         setData(data);\n  //         setIsPending(false);\n  //         setError(null);\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //       } else if (isMounted) {\n  //         // Check if mounted before updating state\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => {\n  //     isMounted = false; // Mark component as unmounted\n  //     abortCont.abort();\n  //   };\n  // }, [url]);\n\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","console","log","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"sources":["/home/tobiya/Coding/react-blog/frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = (url) => {\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n    //useState is a hook which rerenders the component on every state change\n\n    const abortCont = new AbortController();\n    console.log(abortCont);\n\n    fetch(url, { signal: abortCont.signal })\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"could not fetch the data\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      })\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"fetch aborted\");\n          console.log(err);\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n\n    return () => abortCont.abort();\n  }, [url]);\n\n  // useEffect(() => {\n  //   const abortCont = new AbortController();\n  //   let isMounted = true; // Track whether the component is mounted\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       if (isMounted) {\n  //         // Only update state if component is still mounted\n  //         setData(data);\n  //         setIsPending(false);\n  //         setError(null);\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //       } else if (isMounted) {\n  //         // Check if mounted before updating state\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => {\n  //     isMounted = false; // Mark component as unmounted\n  //     abortCont.abort();\n  //   };\n  // }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;AACA;;AAEA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA;;IAEA,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IACvCC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IAEtBI,KAAK,CAACZ,GAAG,EAAE;MAAEa,MAAM,EAAEL,SAAS,CAACK;IAAO,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACX,MAAMC,KAAK,CAAC,0BAA0B,CAAC;MACzC;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDJ,IAAI,CAAEZ,IAAI,IAAK;MACdC,OAAO,CAACD,IAAI,CAAC;MACbG,YAAY,CAAC,KAAK,CAAC;MACnBE,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,CACDY,KAAK,CAAEC,GAAG,IAAK;MACd,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;QAC7BX,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC5BD,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;MAClB,CAAC,MAAM;QACLf,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACa,GAAG,CAACE,OAAO,CAAC;MACvB;IACF,CAAC,CAAC;IAEJ,OAAO,MAAMd,SAAS,CAACe,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,CAACvB,GAAG,CAAC,CAAC;;EAET;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACL,EAAA,CA3EIF,QAAQ;AA6Ed,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}