{"ast":null,"code":"import{useState,useEffect}from\"react\";//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\nconst useFetch=url=>{//custom hooks need be a function and named use....\nconst[data,setData]=useState(null);const[isPending,setIsPending]=useState(true);const[error,setError]=useState(null);useEffect(()=>{//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\nconst abortCont=new AbortController();fetch(url,{signal:abortCont.signal}).then(res=>{if(!res.ok){throw Error(\"could not fetch the data\");}return res.json();}).then(data=>{setData(data);setIsPending(false);setError(null);}).catch(err=>{if(err.name===\"AbortError\"){console.log(\"fetch aborted\");console.log(err);}else{setIsPending(false);setError(err.message);}});return()=>abortCont.abort();},[url]);return{data,isPending,error};};export default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/home/tobiya/Coding/react-blog/frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = (url) => {\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n    //useState is a hook which rerenders the component on every state change\n\n    const abortCont = new AbortController();\n\n    fetch(url, { signal: abortCont.signal })\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"could not fetch the data\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      })\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"fetch aborted\");\n          console.log(err);\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n\n    return () => abortCont.abort();\n  }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C;AACA;AAEA,KAAM,CAAAC,QAAQ,CAAIC,GAAG,EAAK,CACxB;AAEA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGL,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACM,SAAS,CAAEC,YAAY,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd;AACA;AAEA,KAAM,CAAAS,SAAS,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CAEvCC,KAAK,CAACT,GAAG,CAAE,CAAEU,MAAM,CAAEH,SAAS,CAACG,MAAO,CAAC,CAAC,CACrCC,IAAI,CAAEC,GAAG,EAAK,CACb,GAAI,CAACA,GAAG,CAACC,EAAE,CAAE,CACX,KAAM,CAAAC,KAAK,CAAC,0BAA0B,CAAC,CACzC,CACA,MAAO,CAAAF,GAAG,CAACG,IAAI,CAAC,CAAC,CACnB,CAAC,CAAC,CACDJ,IAAI,CAAEV,IAAI,EAAK,CACdC,OAAO,CAACD,IAAI,CAAC,CACbG,YAAY,CAAC,KAAK,CAAC,CACnBE,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAC,CACDU,KAAK,CAAEC,GAAG,EAAK,CACd,GAAIA,GAAG,CAACC,IAAI,GAAK,YAAY,CAAE,CAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5BD,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC,CAClB,CAAC,IAAM,CACLb,YAAY,CAAC,KAAK,CAAC,CACnBE,QAAQ,CAACW,GAAG,CAACI,OAAO,CAAC,CACvB,CACF,CAAC,CAAC,CAEJ,MAAO,IAAMd,SAAS,CAACe,KAAK,CAAC,CAAC,CAChC,CAAC,CAAE,CAACtB,GAAG,CAAC,CAAC,CAET,MAAO,CAAEC,IAAI,CAAEE,SAAS,CAAEE,KAAM,CAAC,CACnC,CAAC,CAED,cAAe,CAAAN,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}