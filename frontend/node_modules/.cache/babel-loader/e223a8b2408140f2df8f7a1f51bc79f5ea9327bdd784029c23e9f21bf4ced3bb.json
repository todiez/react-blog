{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nexports.makeUpdateStatement = makeUpdateStatement;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n  get commandName() {\n    return 'update';\n  }\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n  async execute(server, session) {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    if (options.let) {\n      command.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find(o => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n      }\n    }\n    const res = await super.executeCommand(server, session, command);\n    return res;\n  }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: false\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  async execute(server, session) {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new error_1.MongoServerError(res);\n    if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: true\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  async execute(server, session) {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new error_1.MongoServerError(res);\n    if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n  constructor(collection, filter, replacement, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, replacement, {\n      ...options,\n      multi: false\n    })], options);\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n  async execute(server, session) {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new error_1.MongoServerError(res);\n    if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n  const op = {\n    q: filter,\n    u: update\n  };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n  return op;\n}\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"names":["exports","makeUpdateStatement","error_1","require","utils_1","command_1","operation_1","UpdateOperation","CommandOperation","constructor","ns","statements","options","undefined","commandName","canRetryWrite","every","op","multi","execute","server","session","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","unacknowledgedWrite","writeConcern","w","find","o","hint","MongoCompatibilityError","res","executeCommand","UpdateOneOperation","filter","s","namespace","hasAtomicOperators","MongoInvalidArgumentError","explain","code","MongoServerError","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","ReplaceOneOperation","replacement","q","u","upsert","arrayFilters","collation","defineAspects","Aspect","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["/home/tobiya/node_modules/mongodb/src/operations/update.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType, TODO_NODE_3286 } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { hasAtomicOperators, type MongoDBNamespace } from '../utils';\nimport { type CollationOptions, CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, type Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * @public\n * `TSchema` is the schema of the collection\n */\nexport interface UpdateResult<TSchema extends Document = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: InferIdType<TSchema> | null;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get commandName() {\n    return 'update' as const;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        throw new MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n      }\n    }\n\n    const res = await super.executeCommand(server, session, command);\n    return res;\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res: TODO_NODE_3286 = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res: TODO_NODE_3286 = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res: TODO_NODE_3286 = await super.execute(server, session);\n    if (this.explain != null) return res;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document | Document[],\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}