{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = url => {\n  _s();\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect(() => {\n  //   //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n  //   //useState is a hook which rerenders the component on every state change\n\n  //   const abortCont = new AbortController();\n  //   console.log(abortCont);\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //         console.log(err);\n  //       } else {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => abortCont.abort();\n  // }, [url]);\n\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"Z23tQxuo1vwhnz1JJr7Qoh+Ps/M=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError"],"sources":["/home/tobiya/Coding/react-blog/frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n//use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n//useState is a hook which rerenders the component on every state change\n\nconst useFetch = (url) => {\n  //custom hooks need be a function and named use....\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect(() => {\n  //   //use effect is a hook that runs a function on every render of the component, e.g. to fetch data\n  //   //useState is a hook which rerenders the component on every state change\n\n  //   const abortCont = new AbortController();\n  //   console.log(abortCont);\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then((res) => {\n  //       if (!res.ok) {\n  //         throw Error(\"could not fetch the data\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //     })\n  //     .catch((err) => {\n  //       if (err.name === \"AbortError\") {\n  //         console.log(\"fetch aborted\");\n  //         console.log(err);\n  //       } else {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       }\n  //     });\n\n  //   return () => abortCont.abort();\n  // }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C;AACA;;AAEA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,OAAO;IAAEK,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACL,EAAA,CAxCIF,QAAQ;AA0Cd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}